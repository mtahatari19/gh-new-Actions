name: CI/CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (sha/latest/custom)"
        required: false
        default: "latest"

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/mtahatari19/gh-new-actions
  TARGET_PLATFORM: linux/arm/v7

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - run: npm run lint

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - run: npm ci
      - run: npm test

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        run: |
          set -euo pipefail
          docker buildx build \
            --platform "${TARGET_PLATFORM}" \
            -t "${IMAGE_NAME}:${GITHUB_SHA}" \
            -t "${IMAGE_NAME}:latest" \
            --push .

  deploy:
    needs: build_and_push
    runs-on: [self-hosted, Linux, ARM, raspberrypi]
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    env:
      SERVICE: app
      COMPOSE_DIR: /home/pi/app
      TAG: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.sha }}
    steps:
      - name: Ensure tools
        run: |
          which jq >/dev/null 2>&1 || { sudo apt-get update && sudo apt-get install -y jq; }
          which curl >/dev/null 2>&1 || { sudo apt-get update && sudo apt-get install -y curl; }
      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin || true
      - name: Pull image
        run: |
          cd "$COMPOSE_DIR"
          TAG=${TAG} docker compose pull
      - name: Up new version
        run: |
          cd "$COMPOSE_DIR"
          TAG=${TAG} docker compose up -d
      - name: Wait healthy or running
        id: wait
        timeout-minutes: 5
        run: |
          set -euo pipefail
          cd "$COMPOSE_DIR"
          CID=$(docker compose ps -q "$SERVICE")
          for i in $(seq 1 20); do
            STATE=$(docker inspect --format='{{json .State}}' "$CID")
            HEALTH=$(echo "$STATE" | jq -r '.Health.Status // empty')
            STATUS=$(echo "$STATE" | jq -r '.Status')
            if [ "$HEALTH" = "healthy" ] || { [ -z "$HEALTH" ] && [ "$STATUS" = "running" ]; }; then
              exit 0
            fi
            sleep 10
          done
          exit 1
      - name: Rollback to latest
        if: failure()
        run: |
          set -euo pipefail
          cd "$COMPOSE_DIR"
          TAG=latest docker compose pull
          TAG=latest docker compose up -d
      - name: Cleanup
        if: always()
        run: docker image prune -f || true
